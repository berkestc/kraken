// Mocks generated by Mockito 5.4.0 from annotations
// in kraken/test/features/anime/presentation/cubits/anime_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:fpdart/fpdart.dart' as _i2;
import 'package:kraken/core/models/failure/failure.dart' as _i5;
import 'package:kraken/features/anime/domain/models/character.dart' as _i6;
import 'package:kraken/features/anime/domain/repositories/anime_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AnimeRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnimeRepository extends _i1.Mock implements _i3.AnimeRepository {
  MockAnimeRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> sendFetchAnimeListRequest({int? page = 1}) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendFetchAnimeListRequest,
          [],
          {#page: page},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void setOnAnimesFetched(_i3.OnAnimesFetched? onAnimesFetched) =>
      super.noSuchMethod(
        Invocation.method(
          #setOnAnimesFetched,
          [onAnimesFetched],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Character>>> getCharacters(
          int? animeId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCharacters,
          [animeId],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.Character>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.Character>>(
          this,
          Invocation.method(
            #getCharacters,
            [animeId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Character>>>);
}
